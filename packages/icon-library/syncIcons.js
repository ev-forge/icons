/**
 * This file will:
 * 1. load svg into individual variables to make treeshaking
 * 2. create a metadata to facilitate the icon browser
 * 3. copy the icons on docs/public/icon to access then in the icon browser
 */


import { rmSync, readdirSync, writeFileSync, existsSync, mkdirSync, readFileSync } from 'fs';
import path, { basename } from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';


const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const validator = new Set()
const metadata = []

const toCamelCase = (str) => str
    .replace(/-./g, match => match.charAt(1).toUpperCase())
    .replace(/^./, match => match.toLowerCase());

const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);

const mapSvgFilesToString = (iconsDir, prefix, outputFile, beginItemPath) => {
    const outputDir = outputFile.substring(0, outputFile.lastIndexOf('/'));
    if (!existsSync(outputDir)) mkdirSync(outputDir, { recursive: true });

    const filesPath = path.resolve(__dirname, `${iconsDir}/${prefix}`);
    const files = readdirSync(filesPath)
        .filter(file => file.endsWith('.svg'));

    const exports = files.map(file => {
        const name = `${basename(file, '.svg')}-${prefix}`;
        if (validator.has(name)) console.warn("duplicated", name)
        validator.add(name)
        const exportName = `svg${capitalize(toCamelCase(name))}`;
        const svgPath = `${beginItemPath}/${prefix}/${file}?raw`

        const filePath = path.join(iconsDir, prefix, file);
        metadata.push({ name, code: exportName, svg: readFileSync(filePath, 'utf-8') })

        return `export { default as ${exportName} } from '${svgPath}';`;
    });

    const outputFileFixed = path.resolve(__dirname, outputFile);
    const HEADER_MESSAGE = '// üö® Auto-generated by genSvg.js, do not edit'
    const content = exports.length === 0
        ? `${HEADER_MESSAGE}\n\nexport type ${prefix} = never;\n`
        : [HEADER_MESSAGE, ...exports].join('\n');
    writeFileSync(outputFileFixed, content);

    console.log(`‚úÖ Generated ${files.length} item on ${outputFileFixed}`);
}

const buildMetadata = (metadata) => {
    const publicIconsPath = '../../apps/docs/public/icons'
    const publicIconsPathOnDocs = path.resolve(__dirname, publicIconsPath);

    const metadataPath = path.resolve(__dirname, './src/gen/metadata.ts');
    const content = [
        '// Auto-generated by genSvg.js',
        `export const metadata = [\n${metadata.map(c => `{ name: '${c.name}', code: '${c.code}' }`).join(",\n")}]`,
    ].join('\n');
    writeFileSync(metadataPath, content);

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(`‚ÑπÔ∏è Confirm to sync icons on: "${publicIconsPathOnDocs}" ? (y / n)`, (answer) => {
        if (answer.toLowerCase() === 'y') {
            rmSync(publicIconsPathOnDocs, { recursive: true, force: true });
            mkdirSync(publicIconsPathOnDocs, { recursive: true })
            metadata.forEach(c => {
                const iconFilePath = path.join(publicIconsPathOnDocs, `${c.name}.svg`)
                writeFileSync(iconFilePath, c.svg);
            })
        } else {
            console.log('‚ùå Operation canceled');
        }
        rl.close();
    });

}

// sync base
mapSvgFilesToString('./src/assets/base', 'brands', './src/gen/base/brandIcons.ts', "../../assets/base")
mapSvgFilesToString('./src/assets/base', 'regular', './src/gen/base/regularIcons.ts', "../../assets/base")
mapSvgFilesToString('./src/assets/base', 'solid', './src/gen/base/solidIcons.ts', "../../assets/base")

// sync community
mapSvgFilesToString('./src/assets/community', 'brands', './src/gen/community/brandIcons.ts', "../../assets/community")
mapSvgFilesToString('./src/assets/community', 'regular', './src/gen/community/regularIcons.ts', "../../assets/community")
mapSvgFilesToString('./src/assets/community', 'solid', './src/gen/community/solidIcons.ts', "../../assets/community")
mapSvgFilesToString('./src/assets/community', 'gradient', './src/gen/community/gradientIcons.ts', "../../assets/community")

buildMetadata(metadata)
