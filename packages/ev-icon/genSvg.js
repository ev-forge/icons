import { readdirSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { basename } from 'path';

const validator = new Set()

const mapSvgFilesToString = (iconsDir, prefix, outputFile, beginItemPath) => {
    const outputDir = outputFile.substring(0, outputFile.lastIndexOf('/'));
    if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
    }

    const files = readdirSync(`${iconsDir}/${prefix}`)
        .filter(file => file.endsWith('.svg'));

    function toCamelCase(str) {
        return str
            .replace(/-./g, match => match.charAt(1).toUpperCase()) // Reemplaza el guion seguido de letra por la letra mayúscula
            .replace(/^./, match => match.toLowerCase()); // Asegura que la primera letra esté en minúscula
    }

    const exports = files.map(file => {
        const name = `${basename(file, '.svg')}-${prefix}`; // 'home'
        if (validator.has(name)) console.warn("duplicated", name)
        validator.add(name)
        const exportName = `svg${capitalize(toCamelCase(name))}`; // svgHome
        return `export { default as ${exportName} } from '${beginItemPath}/${prefix}/${file}?raw';`;
    });

    function capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    const content = [
        '// Auto-generated by scripts/generate-icons.ts',
        ...exports,
        '', // línea final
    ].join('\n');

    writeFileSync(outputFile, content);

    console.log(`✅ Generated ${files.length} item on ${outputFile}`);

}

mapSvgFilesToString('./src/assets', 'brands', './src/gen/brandIcons.ts', "../assets")
mapSvgFilesToString('./src/assets', 'regular', './src/gen/regularIcons.ts', "../assets")
mapSvgFilesToString('./src/assets', 'solid', './src/gen/solidIcons.ts', "../assets")
