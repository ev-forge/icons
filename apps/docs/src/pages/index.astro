---
import {
  svgDogSolid,
  svgExternalLinkAltSolid,
  svgPersonWalkingSolid,
  svgRocketSolid,
  svgSearchSolid,
} from "@ev-forge/icons";

import {
  ADD_TYPES_EXAMPLE,
  LINKS,
  IMPORT_AND_USE_IT_EXAMPLE,
  INSTALL_EXAMPLE,
  CREATE_DTS_FILE,
  ICON_LIBRARY_REGISTER,
  REGISTER_IN_ASTRO,
  EXAMPLES_ASTRO,
} from "../constants";
import Layout from "../layouts/Layout.astro";
// import hljs from "highlight.js";
import CodeBlock from "../components/CodeBlock.astro";

// const jsExample = `
// function saludar(nombre) {
//   console.log('Hola ' + nombre + '!');
// }
// saludar('Astro');
// `;

// import("highlight.js/lib/core");

// hljs.registerLanguage('javascript', require('highlight.js/lib/languages/javascript'));
---

<Layout>
  <main class="flex flex-col items-center gap-10">
    <section
      class="w-full max-w-[800px] min-h-dvh p-4 flex flex-col items-center justify-center gap-4 md:gap-10"
    >
      <h1 class="text-4xl text-center md:text-6xl">
        The Last Icon Library You’ll Ever Need
      </h1>
      <p class="text-center text:lg md:text-2xl">
        <span class="font-bold">@ev-forge/icons</span> is an open-source engine that unleashes
        the full power of Font Awesome's massive library with a modern: <span
          class="font-bold">perfect tree-shaking, agnostic JSX</span
        > and <span class="font-bold">community extensible</span>

        <div class="pt-12 flex flex-col justify-center items-center gap-4">
          <div class="relative w-full max-w-3xs">
            <ev-icon
              svg={svgDogSolid}
              class="absolute text-base bottom-0 right-24"></ev-icon>
            <ev-icon
              svg={svgPersonWalkingSolid}
              class="absolute text-2xl bottom-0 right-16"></ev-icon>
            <ev-icon
              svg={svgRocketSolid}
              class="absolute text-5xl -rotate-45 bottom-0 right-0"></ev-icon>
          </div>

          <a
            href="#get-started"
            class="w-full max-w-3xs p-2 text-center gap-2 bg-ev-secondary rounded-md scroll-smooth"
            >Get Started
            <ev-icon svg={svgPersonWalkingSolid}></ev-icon>
          </a>
          <a
            href={LINKS["browser-icons"]}
            class="w-full max-w-3xs p-2 flex items-center justify-center gap-2 border-2 border-ev-secondary rounded-md"
            >Browse Icons<ev-icon svg={svgExternalLinkAltSolid}></ev-icon></a
          >
        </div>
      </p>
    </section>

    <section
      class="w-full max-w-[800px] p-4 flex flex-col justify-center gap-4 md:gap-10"
    >
      <h2 class="text-2xl md:text-4xl">Getting Started</h2>

      <h3>With Vite/React</h3>
      <p><span class="font-bold">Step 1:</span> Install the package</p>
      <!--  -->
      <!-- <pre>
        <code >
          npm i @ev-forge/icons
        </code>
      </pre> -->
      <!-- <CodeBlock code={jsExample} language="javascript" /> -->
      <CodeBlock code={`npm i @ev-forge/icons`} language="javascript" />
      <p>
        <span class="font-bold">Step 2:</span> Add ev-icon web component definition
        into your project, you can include it into your tsconfig
      </p>
      <CodeBlock
        code={`
        {
          "include": ["node_modules/@ev-forge/icons/dist/global.d.ts"]
        }
        `}
        language="javascript"
      />
      <!-- 
      
      -->
      <p>Or you can add it into a ev-forge/icons.d.ts file</p>
      <!-- /// <reference path="node_modules/@ev-forge/icon-library/dist/global.d.ts" /> -->
      <p>
        <span class="font-bold">Step 3 (optional):</span> On server side rendering,
        you need to register you the ev-icon web component, ex in NextJs, create
        a client component
      </p>
      <!-- 
      "use client";  import { useEffect } from "react";
      export const IconLibraryRegistry = () => { 
         useEffect(() => { 
        import("@ev-forge/icon-library"); 
        }, []);
        return null;
      };
      -->
      <p>Other example in Astro, create client script</p>
      <!-- 
      <script>
        import "@ev-forge/icon-library"; 
      </script>
       -->
      <p><span class="font-bold">Step 4:</span> Import and use it</p>
      <!--
      import { svgHomeSolid } from "@ev-forge/icon-library"; 
        const MyComponent = ()=>{
          return <div>
              <ev-icon svg={svgHomeSolid}/>
          </div>
        }
      -->
    </section>

    <section
      id="get-started"
      class="w-full max-w-[800px] p-4 flex flex-col justify-center gap-4 md:gap-10"
    >
      <h2 class="text-2xl md:text-4xl">Get Started</h2>

      <div>
        <h3 class="text-xl font-bold">In Vite/React</h3>
        <div>
          <h4 class="text-lg">Step 1: Install</h4>
          <pre><code class="bash">{INSTALL_EXAMPLE}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">
            Step 2: add the web component types into your tsconfig.ts
          </h4>
          <pre><code>{ADD_TYPES_EXAMPLE}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">Step 3: Import and use it</h4>
          <pre><code class="language-jsx">{IMPORT_AND_USE_IT_EXAMPLE}</code></pre>
        </div>
      </div>

      <div>
        <h3 class="text-xl font-bold">In NextJs</h3>
        <div>
          <h4 class="text-lg">Step 1: Install</h4>
          <pre><code class="bash">{INSTALL_EXAMPLE}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">
            Step 2: add the web component, create a file ev-forge-icons.d.ts and
            copy inside
          </h4>
          <pre><code>{CREATE_DTS_FILE}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">
            Step 3: (Optional) For Next.js with Server-Side Rendering (SSR): To
            ensure icons render correctly, you must register the component
            library on the client-side. Create the file
            `IconLibraryRegistry.tsx` and paste the following code:
          </h4>
          <pre><code class="language-jsx">{ICON_LIBRARY_REGISTER}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">Step 4: Import and Use</h4>
          <pre><code class="language-jsx">{IMPORT_AND_USE_IT_EXAMPLE}</code></pre>
        </div>
      </div>

      <div>
        <h3 class="text-xl font-bold">In Astro/React</h3>
        <div>
          <h4 class="text-lg">Step 1: Install</h4>
          <pre><code class="bash">{INSTALL_EXAMPLE}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">
            Step 2: add the web component types into your tsconfig.ts
          </h4>
          <pre><code>{ADD_TYPES_EXAMPLE}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">
            Step 3: (Optional) For Astro with Server-Side Rendering (SSR): To
            ensure icons render correctly, you must register the component
            library on the client-side. Add the script into your Layout
          </h4>
          <pre><code class="language-jsx">{REGISTER_IN_ASTRO}</code></pre>
        </div>

        <div>
          <h4 class="text-lg">Step 4: Import and Use</h4>
          <pre><code class="language-jsx">{EXAMPLES_ASTRO}</code></pre>
        </div>
      </div>

      <div class="flex flex-col items-center gap-4">
        <p class="font-semibold text-center text-2xl">
          Done! That's all it takes. For a full list of available icons, head
          over to our Icon Browser.
        </p>
        <a
          href={LINKS["browser-icons"]}
          class="p-2 flex items-center gap-2 bg-ev-secondary rounded-md"
          >Browse Icons<ev-icon svg={svgSearchSolid}></ev-icon></a
        >
      </div>
    </section>
  </main>
</Layout>
